<?php
// $Id$

/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.3                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2011                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License along with this program; if not, contact CiviCRM LLC       |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2011
 * $Id$
 *
 */

define('CIVICRM_ENGAGE_CG_DEMOGRAPHICS_NAME', 'Demographics');
define('CIVICRM_ENGAGE_DEMOGRAPHICS_PREFIX', 'demographics_');
define('CIVICRM_ENGAGE_DEMOGRAPHICS_TITLE', 'Demographics');
function _civicrm_engage_getCustomGroupID($customGroupName) {
  require_once 'CRM/Utils/Type.php';
  $customGroupName = CRM_Utils_Type::escape($customGroupName, 'String');
  return CRM_Core_DAO::getFieldValue("CRM_Core_DAO_CustomGroup", $customGroupName, 'id', 'name');
}

function civicrm_engage_civicrm_buildForm($formName, &$form) {
  if ($formName == 'CRM_Contact_Form_Contact') {
    $cgID = _civicrm_engage_getCustomGroupID(CIVICRM_ENGAGE_CG_DEMOGRAPHICS_NAME);
    if (empty($cgID)) {
      return;
    }
    $groupTree = &CRM_Core_BAO_CustomGroup::getTree('Individual',
      $form,
      $form->getVar('_contactId'),
      $cgID,
      NULL, NULL
    );

    // we should use simplified formatted groupTree
    $groupTree = CRM_Core_BAO_CustomGroup::formatGroupTree($groupTree, 1, $form);

    if (isset($groupTree) && is_array($groupTree)) {
      $defaults = array();
      CRM_Core_BAO_CustomGroup::setDefaults($groupTree, $defaults);
      $form->setDefaults($defaults);

      CRM_Core_BAO_CustomGroup::buildQuickForm($form, $groupTree, FALSE, 1,
        CIVICRM_ENGAGE_DEMOGRAPHICS_PREFIX
      );
    }
  }
}

function civicrm_engage_civicrm_postProcess($class, &$form) {
  if (is_a($form, 'CRM_Contact_Form_Contact')) {
    if (array_key_exists('_qf_Contact_refresh_dedupe', $form->_submitValues)) {
      // don't execute when checking for duplicates - it fails (CRM-8994)
      return;
    }
    else {
      $cgID = _civicrm_engage_getCustomGroupID(CIVICRM_ENGAGE_CG_DEMOGRAPHICS_NAME);
      if (empty($cgID)) {
        return;
      }
      $groupTree = &CRM_Core_BAO_CustomGroup::getTree('Individual',
        $form,
        $form->getVar('_contactId'),
        $cgID,
        NULL, NULL
      );

      // we should use simplified formatted groupTree
      $groupTree = CRM_Core_BAO_CustomGroup::formatGroupTree($groupTree, 1, $form);

      if (isset($groupTree) && is_array($groupTree)) {
        require_once 'CRM/Core/BAO/CustomValueTable.php';
        CRM_Core_BAO_CustomValueTable::postProcess($form->controller->exportValues($form->getVar('_name')),
          $groupTree[$cgID]['fields'],
          'civicrm_contact',
          $form->getVar('_contactId'),
          'Individual'
        );
      }
    }
  }
}

function civicrm_engage_civicrm_pageRun(&$page) {
  if ($page->getVar('_name') == 'CRM_Contact_Page_View_Summary') {
    $cgID = _civicrm_engage_getCustomGroupID(CIVICRM_ENGAGE_CG_DEMOGRAPHICS_NAME);
    if (empty($cgID)) {
      return;
    }
    $groupTree = &CRM_Core_BAO_CustomGroup::getTree('Individual',
      $page,
      $page->getVar('_contactId'),
      $cgID,
      NULL, NULL
    );


    CRM_Core_BAO_CustomGroup::buildCustomDataView($page,
      $groupTree,
      FALSE, NULL,
      CIVICRM_ENGAGE_DEMOGRAPHICS_PREFIX
    );
  }
}

function civicrm_engage_civicrm_tabs(&$tabs, $contactID) {
  foreach ($tabs as $tabID => $tabValue) {
    if ($tabValue['title'] == CIVICRM_ENGAGE_DEMOGRAPHICS_TITLE) {
      unset($tabs[$tabID]);
    }
  }
}

function civicrm_engage_civicrm_config(&$config) {
  $engageRoot = dirname(__FILE__) . DIRECTORY_SEPARATOR;

  // fix php include path
  $include_path = $engageRoot . PATH_SEPARATOR . get_include_path();
  set_include_path($include_path);

  // fix template path
  $templateDir = $engageRoot . 'templates' . DIRECTORY_SEPARATOR;
  $template = &CRM_Core_Smarty::singleton();
  if (is_array($template->template_dir)) {
    $template->template_dir = array_merge(array($templateDir),
      $template->template_dir
    );
  }
  else {
    $template->template_dir = array($templateDir, $template->template_dir);
  }
}

/**
 * Implementation of hook_perm().
 */
function civicrm_engage_perm() {
  return array('access civiengage settings');
}

function civicrm_engage_menu() {

  $items['admin/settings/civicrm_engage'] = array(
    'title' => t('Civicrm engage settings'),
    'description' => t('CiviCRM Engage Configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civicrm_engage_admin_settings'),
    'access arguments' => array('access civiengage settings'),
    'file' => 'civicrm_engage.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

