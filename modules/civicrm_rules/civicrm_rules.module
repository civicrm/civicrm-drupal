<?php
// $Id$

/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.3                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2011                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2011
 * $Id$
 *
 */

/**
 * Implement the pre hook and fire the corresponding rules event. Note Mailing api is not std so can't be handled
 * but it doesn't have a delete function so that is dealt with by escaping on delete
 *
 */
function civicrm_rules_civicrm_pre($op, $objectName, $objectId, &$objectRef) {
  if (!module_exists('rules') || $op != 'delete') {
    return;
  }
  $validObjects = variable_get('civicrm_rules_post_entities', array('Contact'));

  if (!in_array(strtolower($objectName), $validObjects)) {
    return;
  }

  //make sure we have the array
  if (!is_array($objectRef) || empty($objectRef->id)) {
    $entityArray = civicrm_api($objectName, 'getsingle',
      array('version' => 3, 'id' => $objectId)
    );
  }
  else {
    $entityArray = &$objectRef;
  }
  //convert it to a DAO
  require_once 'api/v3/utils.php';
  $dao = _civicrm_api3_load_DAO($objectName);
  if (!empty($dao)) {
    foreach ($entityArray as $key => $value) {
      $dao->$key = $value;
    }
  }
  $objectName = strtolower($objectName);
  $objectEvent = 'civicrm_event';
  if ($objectName != 'contact') {
    // without the civicrm prefix too much chance of another drupal module being enabled
    $objectEvent = $objectName = 'civicrm_' . $objectName;
  }

  $eventName = NULL;
  switch ($op) {
    case 'delete':
      $eventName = "{$objectName}_{$op}";
      break;

    default:
      break;
  }

  if ($eventName) {
    rules_invoke_event($eventName, array($objectEvent => $dao));
  }
}

/**
 * Implement the post hook and fire the corresponding rules event
 */
function civicrm_rules_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  if (!module_exists('rules') || $op == 'delete') {
    return;
  }

  if (in_array($objectName,
      array('Individual', 'Household', 'Organization')
    )) {
    $objectName = 'Contact';
  }

  // process only contacts for now
  $validObjects = variable_get('civicrm_rules_post_entities', array('Contact'));

  if (!in_array(strtolower($objectName), $validObjects)) {
    return;
  }

  $objectName = strtolower($objectName);
  $objectEvent = 'civicrm_event';
  if ($objectName != 'contact') {
    // without the civicrm prefix too much chance of another drupal module being enabled
    $objectEvent = $objectName = 'civicrm_' . $objectName;
  }

  $eventName = NULL;
  switch ($op) {
    case 'create':
    case 'edit':
      $eventName = "{$objectName}_{$op}";
      break;

    default:
      break;
  }

  if ($eventName) {
    rules_invoke_event($eventName, array($objectEvent => $objectRef));
  }
}

/**
 * Implement civicrm pageRun hook and fire the corresponding rules event
 */
function civicrm_rules_civicrm_pageRun(&$page) {
  if (!module_exists('rules')) {
    return;
  }

  // process only contacts for now
  $validObjects = array('CRM_Contact_Page_View_Summary');

  $className = get_class($page);
  if (!in_array($className, $validObjects)) {
    return;
  }

  $eventName = NULL;
  switch ($className) {
    case 'CRM_Contact_Page_View_Summary':
      $eventName = 'contact_view';
      break;

    default:
      break;
  }

  if ($eventName) {
    rules_invoke_event($eventName, $page);
  }
}

/**
 * Implement the postProcess hook and fire the corresponding rules event
 * We'll do this for specific forms only (for now)
 */
function civicrm_rules_civicrm_postProcess($formName, &$form) {
  require_once 'CRM/Mailing/Info.php';
  if (CRM_Mailing_Info::workflowEnabled()) {
    $eventName = $eventParams = NULL;

    switch ($formName) {
      case 'CRM_Mailing_Form_Group':
        if ($form->get('continue') == TRUE) {
          $eventName = 'mailing_edit';
          $mailingId = $form->get('mid');
        }
        else {
          $query = "
SELECT max(id)
FROM   civicrm_mailing
";
          $mailingId = CRM_Core_DAO::singleValueQuery($query);
          $eventName = 'mailing_create';
        }
        break;

      case 'CRM_Mailing_Form_Schedule':
        if ($form->get('mid')) {
          $mailingId = $form->get('mid');
        }
        else {
          $mailingId = $form->_mailingID;
        }
        $eventName = 'mailing_scheduled';
        break;

      case 'CRM_Mailing_Form_Approve':
        $mailingId = $form->get('mid');
        $eventName = 'mailing_approved';
        break;

      case 'CRM_Mailing_Form_Upload':
        $eventName = 'mailing_uploaded';
        $mailingId = $form->_mailingID;
        break;

      case 'CRM_Mailing_Form_Test':
        $eventName = 'mailing_inform';
        $mailingId = $form->get('mailing_id') ? $form->get('mailing_id') : $form->get('mid');
        break;

      default:
        break;
    }

    if ($eventName) {
      require_once 'CRM/Mailing/DAO/Mailing.php';
      $eventParams = new CRM_Mailing_DAO_Mailing();
      $eventParams->id = $mailingId;
      $eventParams->find(TRUE);
      rules_invoke_event($eventName, $eventParams);
    }
  }
}
/*
* Implementation of hook_perm().
*/
function civicrm_rules_perm() {
  return array('access civicrm rules settings');
}

function civicrm_rules_menu() {

  $items['admin/settings/civicrm_rules'] = array(
    'title' => t('CiviCRM Rules settings'),
    'description' => t('CiviCRM Rules Configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civicrm_rules_admin_settings'),
    'access arguments' => array('access civicrm rules settings'),
    'file' => 'civicrm_rules_admin_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

