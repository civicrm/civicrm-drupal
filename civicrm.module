<?php

define('CIVICRM_UF_HEAD', TRUE);

require_once 'civicrm.user.inc';

/**
 * Implements hook_page_attachments().
 *
 * Inject arbitrary html into the head region.
 */
function civicrm_page_attachments(array &$page) {
  // Only do anything if CiviCRM is bootstrapped.
  global $civicrm_root;
  if (empty($civicrm_root)) {
    return;
  }

  // Always add core resources (even if not on a /civicrm page).
  CRM_Core_Resources::singleton()->addCoreResources();

  // Merge CiviCRM stuff into HTML header.
  if ($region = \CRM_Core_Region::instance('html-header', FALSE)) {
    \CRM_Utils_System::addHTMLHead($region->render(''));
  }

  /** @var \Drupal\civicrm\CivicrmPageState $page_state */
  $page_state = \Drupal::service('civicrm.page_state');

  // Attach CSS and JS.
  foreach ($page_state->getCSS() as $counter => $css) {
    $page['#attached']['html_head'][] = array($css, 'civicrm-css-' . $counter);
  }
  foreach ($page_state->getJS() as $counter => $js) {
    $page['#attached']['html_head'][] = array($js, 'civicrm-js-' . $counter);
  }

  // Any other miscellaneous headers.
  $headers = $page_state->getHtmlHeaders();
  $markup  = [
    '#type'   => 'markup',
    '#weight' => -99,
    '#markup' => \Drupal\Core\Render\Markup::create($headers),
  ];
  $page['#attached']['html_head'][] = [$markup, 'civicrm-headers'];
}

/**
 * Implements hook_toolbar().
 *
 * Injects a link into the Drupal toolbar to /civicrm for users with
 * 'access civicrm' permission.
 */
function civicrm_toolbar() {
  $items = [];

  // Always return it with right cache context even if it's empty so that the
  // permissions can control it's visibility.
  $items['civicrm'] = [
    '#cache' => [
      'contexts' => ['user.permissions'],
    ],
  ];

  $user = \Drupal::currentUser();
  if ($user->hasPermission('access CiviCRM')) {
    $items['civicrm'] += [
      '#type' => 'toolbar_item',
      'tab' => [
        '#type' => 'link',
        '#title' => t('CiviCRM'),
        '#url' => \Drupal\Core\Url::fromRoute('civicrm.civicrm'),
        '#options' => [
          'attributes' => [
            'title' => t('CiviCRM'),
            'class' => ['toolbar-item'],
          ],
        ],
      ],
    ];
  }

  return $items;
}

/**
 * Implements hook_entity_extra_field_info().
 *
 * Add additional pseudo-fields to the user display. This allows the UI
 * to control the order in which these are displayed, or whether they are displayed
 * at all.
 *
 * @Todo: set these fields are visible ONLY for the 'full' user display.
 */
function civicrm_entity_extra_field_info() {
  $extra['user']['user']['display']['civicrm_record'] = array(
    'label' => t('CiviCRM record link'),
    'description' => t('Link to user’s CiviCRM record.'),
    'weight' => 0,
    'visible' => FALSE,
  );
  $extra['user']['user']['display']['civicrm_dashboard'] = array(
    'label' => t('CiviCRM dashboard link'),
    'description' => t('Link to user’s CiviCRM dashboard.'),
    'weight' => 0,
    'visible' => FALSE,
  );
  $extra['user']['user']['display']['civicrm_profiles'] = array(
    'label' => t('CiviCRM profile summaries'),
    'description' => t('A list CiviCRM profile summaries.'),
    'weight' => 0,
    'visible' => FALSE,
  );

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * We use this hook to add the pseudo-fields we've added in civicrm_entity_extra_field_info()
 * to the user display.
 */
function civicrm_user_view(array &$build, \Drupal\user\UserInterface $account, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::service('civicrm')->initialize();

  // We need the $contact_id so that we know what data to pull out of Civicrm.
  // And we need the contact_id of the current user ($current_contact_id) so
  // that we can perform proper access checks.
  $current_user = \Drupal::currentUser();
  $contact_id = \CRM_Core_BAO_UFMatch::getContactId($account->id());
  $current_contact_id = \CRM_Core_BAO_UFMatch::getContactId($current_user->id());
  if (!$contact_id || !$current_contact_id) {
    return;
  }

  // Contact record link.
  if (($conf = $display->getComponent('civicrm_record')) && $current_user->hasPermission('access CiviCRM') && \CRM_Contact_BAO_Contact_Permission::allow($current_contact_id)) {
    $build['civicrm_record'] = [
      '#type' => 'item',
      '#weight' => $conf['weight'],
      0 => [
        '#type' => 'link',
        '#title' => t('View contact record'),
        '#url' => \Drupal\Core\Url::fromRoute('civicrm.civicrm_contact_view', [
          'reset' => 1,
          'cid' => $contact_id,
        ]),
        '#prefix' => '<span class="user-page-link" id="user-page-contact" ><span class="user-page-bullet">&raquo;</span> ',
        '#suffix' => '</span>',
      ],
    ];
  }

  // Contact dashboard link.
  if (($conf = $display->getComponent('civicrm_dashboard')) && $current_user->hasPermission('access Contact Dashboard') && \CRM_Contact_BAO_Contact_Permission::allow($current_contact_id)) {
    $build['civicrm_dashboard'] = [
      '#type' => 'item',
      '#weight' => $conf['weight'],
      0 => [
        '#type' => 'link',
        '#title' => t('View contact dashboard'),
        '#url' => \Drupal\Core\Url::fromRoute('civicrm.civicrm_user', [
          'reset' => 1,
          'id' => $contact_id,
        ]),
        '#prefix' => '<span class="user-page-link" id="user-page-dashboard" ><span class="user-page-bullet">&raquo;</span> ',
        '#suffix' => '</span>',
      ],
    ];
  }

  // Add profile summaries.
  // @Todo Do we need to check permissions before viewing each profile?
  if (($conf = $display->getComponent('civicrm_profiles')) && $current_user->hasPermission('profile view')) {
    $build['civicrm_profiles'] = array(
      '#weight' => $conf['weight'],
    );

    foreach (_civicrm_get_profiles($contact_id) as $id => $profile) {
      $html = (new \CRM_Profile_Page_Dynamic($contact_id, $id, NULL))->run();
      $build['civicrm_profiles']["civicrm_profile_{$id}"] = [
        '#theme' => 'civicrm_user_profile',
        '#title' => $profile['title'],
        0 => [
          '#markup' => \Drupal\Core\Render\Markup::create($html),
        ],
        // @Todo Check access to this route before displaying the link
        1 => [
          '#type' => 'link',
          '#options' => ['html' => TRUE],
          '#title' => t('Edit %profile_name', ['%profile_name' => $profile['title']]),
          '#url' => \Drupal\Core\Url::fromRoute('civicrm.user_profile', [
            'user' => $account->id(),
            'profile' => $id,
          ]),
          '#prefix' => '<span class="user-page-link" id="user-page-profile-' . substr($profile['title'], 0, 3) . '" ><span class="user-page-bullet">&raquo;</span> ',
          '#suffix' => '</span>',
        ],
      ];
    }
  }
}

/**
 * Get 'User Account' profiles.
 *
 * We return a list of profiles filtered down to only those that are Contact based or
 * based on the $contact_id's contact type.
 */
function _civicrm_get_profiles($contact_id) {
  \Drupal::service('civicrm')->initialize();
  $profiles = array();
  $ctype = \CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Contact', $contact_id, 'contact_type');

  foreach (\CRM_Core_BAO_UFGroup::getModuleUFGroup('User Account') as $id => $uf_group) {
    $fieldType = CRM_Core_BAO_UFField::getProfileType($id);
    if (CRM_Contact_BAO_ContactType::isaSubType($fieldType)) {
      $fieldType = CRM_Contact_BAO_ContactType::getBasicType($fieldType);
    }

    // Filter profiles
    if ($fieldType == 'Contact' || $fieldType == $ctype) {
      $profiles[$id] = $uf_group;
    }
  }
  return $profiles;
}

/**
 * Implements hook_form_TAG_ID_alter().
 *
 * Attach any relevant profile form fields to user registration form.
 */
function civicrm_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $civicrm = \Drupal::service('civicrm');
  $civicrm->initialize();
  $html = \CRM_Core_BAO_UFGroup::getEditHTML(NULL, '', 1, TRUE, FALSE, NULL, FALSE, $civicrm->getCtype());

  $form['civicrm_profile_register'] = array(
    '#markup' => \Drupal\Core\Render\Markup::create($html),
  );
  $form['#validate'][] = '_civicrm_user_register_form_validate';
}

/**
 * Validation function for additional profile form fields attached to user registration form.
 */
function _civicrm_user_register_form_validate(&$form, &$form_state) {
  \Drupal::service('civicrm')->initialize();
  $errors = CRM_Core_BAO_UFGroup::isValid(NULL, '', TRUE);

  if (is_array($errors)) {
    $form_builder = \Drupal::formBuilder();
    foreach ($errors as $name => $message) {
      $form_builder->setErrorByName($name, $form_state, $message);
    }
  }
}

/**
 * Implements hook_theme().
 */
function civicrm_theme() {
  return array(
    'civicrm_contact' => array(
      'render element' => 'elements',
      'template' => 'civicrm-contact',
    ),
    'civicrm_user_profile' => array(
      'render element' => 'elements',
      'template' => 'civicrm-user-profile',
    )
  );
}

/**
 * Prepares variables for civicrm_contact templates.
 *
 * Default template: civicrm-contact.html.twig.
 */
function template_preprocess_civicrm_contact(&$vars) {
  $vars['civicrm_contact'] = $vars['elements']['#civicrm_contact'];
}
