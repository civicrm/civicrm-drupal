<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.7                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2015                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 * Drupal module file.
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2015
 * $Id$
 *
 */

define('CIVICRM_UF_HEAD', TRUE);


/**
 * Provides a link to the CSS stylesheet associated with this module.
 * and the javascript files needed by this module
 *
 * @return a &lt;style&gt; tag that indicates what file browsers should import
 */
function civicrm_html_head() {
  if (!civicrm_initialize()) {
    return;
  }

  if (arg(0) == 'civicrm') {
    // Add our standard css & js
    CRM_Core_Resources::singleton()->addCoreResources();
  } else {
    CRM_Core_Resources::singleton()->addCoreStyles();
  }
}

/**
 * Implementation of hook_perm().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function civicrm_perm() {
  // make sure the system is initialized
  if (!civicrm_initialize()) {
    return;
  }

  $config = CRM_Core_Config::singleton();

  $permissions = CRM_Core_Permission::basicPermissions();
  return array_keys($permissions);
}

/**
 * Implementation of hook_block().
 *
 * This hook both declares to Drupal what blocks are provided by the module, and
 * generates the contents of the blocks themselves.
 */
function civicrm_block($op = 'list', $delta = '0') {
  if ($op == 'configure') {
    return;
  }

  if (!civicrm_initialize()) {
    return;
  }

  // The $op parameter determines what piece of information is being requested.

  // CRM_Core_Error::backtrace( "$op, $delta" );

  if ($op == 'list') {
    $block = CRM_Core_Block::getInfo();
  }
  else {
    $block = CRM_Core_Block::getContent($delta);
  }
  return $block;
}

/**
 * Implementation of hook_menu().
 *
 * You must implement hook_menu() to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 * With the below menu definitions, URLs will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=foo, then the menu system
 * will first look for a menu item with that path. In this case it will
 * find a match, and execute civicrm_foo().
 *
 */
function civicrm_menu() {
  if (!civicrm_initialize()) {
    return;
  }

  return array(
    'civicrm' => array(
      'title' => 'CiviCRM',
      'access callback' => TRUE,
      'page callback' => 'civicrm_invoke',
      'type' => 4,
      'weight' => 0,
    ),
  );
}


/**
 * Initialize CiviCRM. Call this function from other modules too if
 * they use the CiviCRM API.
 */
function civicrm_initialize() {
  // Check for php version and ensure its greater than 5.
  // Do a fatal exit if not.
  if ((int) substr(PHP_VERSION, 0, 1) < 5) {
    echo "CiviCRM requires PHP Version 5.2 or greater. You are running PHP Version " . PHP_VERSION . "<p>";
    exit();
  }
  
  drupal_add_js();

  _civicrm_registerClassLoader();

  static $initialized = FALSE;
  static $failure = FALSE;

  if ($failure) {
    return FALSE;
  }

  if (!$initialized) {
    if (function_exists('conf_path')) {
      $settingsFile = conf_path() . '/civicrm.settings.php';
    }
    else {
      $settingsFile = conf_init() . '/civicrm.settings.php';
    }
    define('CIVICRM_SETTINGS_PATH', $settingsFile);
    $error = include_once($settingsFile);

    // get ready for problems
    $docLinkInstall = "http://wiki.civicrm.org/confluence/display/CRMDOC/Drupal+Installation+Guide";
    $docLinkTrouble = "http://wiki.civicrm.org/confluence/display/CRMDOC/Installation+and+Configuration+Trouble-shooting";
    $forumLink      = "http://forum.civicrm.org/index.php/board,6.0.html";

    $errorMsgAdd = t("Please review the <a href='!1'>Drupal Installation Guide</a> and the <a href='!2'>Trouble-shooting page</a> for assistance. If you still need help installing, you can often find solutions to your issue by searching for the error message in the <a href='!3'>installation support section of the community forum</a>.</strong></p>",
      array('!1' => $docLinkInstall, '!2' => $docLinkTrouble, '!3' => $forumLink)
    );

    if ($error == FALSE) {
      $failure = TRUE;
      drupal_set_message("<strong><p class='error'>" .
        t("Oops! - The CiviCRM settings file (civicrm.settings.php) was not found in the expected location ") .
        "(" . $settingsFile . "). </p><p class='error'>" .
        $errorMsgAdd . '</p></strong>'
      );
      return FALSE;
    }

    // this does pretty much all of the civicrm initialization
    $error = include_once('CRM/Core/Config.php');
    if ($error == FALSE) {
      $failure = TRUE;
      drupal_set_message("<strong><p class='error'>" .
        t("Oops! - The path for including CiviCRM code files is not set properly. Most likely there is an error in the <em>civicrm_root</em> setting in your CiviCRM settings file (!1).",
          array('!1' => $settingsFile)
        ) .
        "</p><p class='error'> &raquo; " .
        t("civicrm_root is currently set to: <em>!1</em>.", array('!1' => $civicrm_root)) .
        "</p><p class='error'>" . $errorMsgAdd . "</p></strong>"
      );
      return FALSE;
    }

    $initialized = TRUE;

    // initialize the system by creating a config object
    $config = CRM_Core_Config::singleton();

    // Add module-specific header elements
    $header = civicrm_html_head();
    if (!empty($header)) {
      drupal_set_html_head($header);
    }

  }
  setMySQLTimeZone();
  return TRUE;
}

/**
 * Find & register classloader and store location in Drupal variable.
 * Per CRM-13737 this allows for drupal code to be outside the core directory
 * which makes it easier for sites managing their own installation methods that
 * may need to cover different drupal versions
 */
function _civicrm_registerClassLoader() {
  $path = variable_get('civicrm_class_loader', NULL);
  if (empty($path) || !file_exists($path)) {
    $candidates = array(
        dirname(__FILE__) . '/../CRM/Core/ClassLoader.php',
        dirname(__FILE__) . '/../civicrm-core/CRM/Core/ClassLoader.php',
        dirname(__FILE__) . '/../core/CRM/Core/ClassLoader.php',
        // ... ad nauseum ...
    );
    foreach ($candidates as $candidate) {
      if (file_exists($candidate)) {
        $path = $candidate;
        variable_set('civicrm_class_loader', $candidate);
        break;
      }
    }
  }

  require_once $path;
  CRM_Core_ClassLoader::singleton()->register();
}

function setMySQLTimeZone(){
 // get UFTImeZone should go on UFClasses -@ todo = move it
 $timeZoneOffset = getUFTimeZone();
 if($timeZoneOffset){
  $sql = "SET time_zone = '$timeZoneOffset'";
  CRM_Core_DAO::executequery($sql);
 }
}

function getUFTimeZone(){
 global $user;
 if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
  $timezone = $user->timezone;
 } else {
  $timezone = variable_get('date_default_timezone', null);
 }
 if(empty($timezone)){
  return false;
 }
 $hour = $user->timezone / 3600;
 $timeZoneOffset = sprintf("%02d:%02d", $timezone / 3600, ($timezone/60)%60 );
 if($timeZoneOffset > 0){
  $timeZoneOffset = '+' . $timeZoneOffset;
 }
 return $timeZoneOffset;
}
/**
 * Function to get the contact type
 *
 * @param string $default contact type
 *
 * @return $ctype contact type
 */
function civicrm_get_ctype($default = NULL) {
  // here we are creating a new contact
  // get the contact type from the POST variables if any

  if (isset($_REQUEST['ctype'])) {
    $ctype = $_REQUEST['ctype'];
  }
  elseif (isset($_REQUEST['edit']) &&
    isset($_REQUEST['edit']['ctype'])
  ) {
    $ctype = $_REQUEST['edit']['ctype'];
  }
  else {
    $ctype = $default;
  }

  if ($ctype != 'Individual' &&
    $ctype != 'Organization' &&
    $ctype != 'Household'
  ) {
    $ctype = $default;
  }
  return $ctype;
}

/**
 * This is the main function that is called on any civicrm click
 *
 */
function civicrm_invoke() {
  // make sure the system is initialized
  if (!civicrm_initialize()) {
    return drupal_not_found();
  }

  civicrm_cache_disable();

  $args = explode('/', $_GET['q']);

  // synchronize the drupal uid with the contacts db
  global $user;

  /* FIXME: hack to bypass synchronize if running upgrade to avoid
       any serious non-recoverable error which might hinder the
       upgrade process. */



  if (!isset($args[1]) or $args[1] != 'upgrade') {
    CRM_Core_BAO_UFMatch::synchronize($user, FALSE, 'Drupal',
      civicrm_get_ctype('Individual')
    );
  }

  return CRM_Core_Invoke::invoke($args);
}

/**
 * User hook for civicrm module
 *
 * Note that we ignore the edit field and do not follow the drupal protocol
 * of extracting values from the edit field. We extract the fields directly
 * from $_POST. This is because the underlying form package that we use
 * (HTML_QuickForm) does the form value extraction and validation.
 *
 * @param string $type     Type of operation being performed
 * @param array  $edit     The array of form values submitted by the user.
 * @param object $user     The user object on which the operation is being performed.
 * @param object $category The active category of user information being edited.
 *
 * @return mixed           depends on the operation being performed
 */
function civicrm_user($type, &$edit, &$user, $category = NULL) {
  if ($type == 'load') {
    return;
  }

  if (!civicrm_initialize()) {
    return;
  }

  switch ($type) {
    case 'login':
      return CRM_Core_BAO_UFMatch::synchronize($user, FALSE, 'Drupal',
        civicrm_get_ctype('Individual'), TRUE
      );

    case 'register':
      $config = CRM_Core_Config::singleton();
      if ($config->inCiviCRM) {
        return;
      }

      if (empty($_POST)) {
        return civicrm_register_data($edit, $user, $category, TRUE, FALSE);
      }
      else {
        return civicrm_register_data($edit, $user, $category, FALSE, TRUE);
      }
      break;

    case 'insert':
      $config = CRM_Core_Config::singleton();
      if ($config->inCiviCRM) {
        return;
      }

      // did civicrm generate this page, or is it via a user hook?
      if (civicrm_on_user_page()) {
        return civicrm_register_data($edit, $user, $category, FALSE);
      }
      else {
        CRM_Core_BAO_UFMatch::synchronize($user, FALSE, 'Drupal',
          civicrm_get_ctype('Individual')
        );
      }
      break;

    case 'view':
      return civicrm_view_data($user);

    case 'update':
      // this always comes in via user hook, so udpate email only if it has changed
      if (isset($edit['mail']) &&
        trim($edit['mail']) != trim($user->mail)
      ) {
        $contactID = CRM_Core_BAO_UFMatch::getContactId($user->uid);

        // cant find the contactID, so lets skip
        if (!$contactID) {
          return;
        }
        CRM_Core_BAO_UFMatch::updateContactEmail($contactID,
          trim($edit['mail'])
        );
      }
      break;

    case 'after_update':
      // ensure preferences navigation is cleared so new role perms are reflected
      // CRM-7450
      CRM_Core_BAO_Navigation::resetNavigation();
      break;

    case 'form':
      $inCategory = TRUE;
      if ($category) {
        $inCategory = FALSE;
        $categories = civicrm_categories($account);
        foreach ($categories as $cat) {
          if ($category == $cat['name']) {
            $inCategory = TRUE;
            break;
          }
        }
      }

      // only return a form to drupal my account page
      if ($inCategory &&
        arg(0) == 'user' &&
        arg(2) == 'edit' &&
        arg(3)
      ) {
        return civicrm_form_data($edit, $user, $category, TRUE);
      }
      break;

    case 'validate':
      return civicrm_validate_data($edit, $user, $category);

    case 'categories':
      return civicrm_categories($user);

    case 'delete':
      return CRM_Core_BAO_UFMatch::deleteUser($user->uid);

    case 'logout':
      $session = CRM_Core_Session::singleton();
      $session->reset();
      return;
  }
}

/**
 * Determine if the user is on a CiviCRM generated page, i.e. the form has some civicrm unique token
 */
function civicrm_on_user_page() {
  return isset($_POST['_qf_default']);
}

function civicrm_categories(&$user) {
  if (!civicrm_initialize()) {
    return;
  }

  $urlParts = explode('/', CRM_Utils_Array::value('q', $_GET, array()));

  $allUFGroups = CRM_Core_BAO_UFGroup::getModuleUFGroup('User Account', 0, TRUE, CRM_Core_Permission::VIEW, array('id', 'name', 'title', 'is_active'));
  $ufGroups = array();

  $weight = 100;
  foreach ($allUFGroups as $key => $value) {
    if ($value['is_active']) {
      $name = $value['name'];
      foreach (array_reverse($urlParts) as $urlPart) {
        if($urlPart == $name) {
          continue;
        }
        elseif ($urlPart == $value['title']) {
          $name = $value['title'];
          continue;
        }
      }

      $ufGroups[] = array('name' => $name,
        'id' => $key,
        'name' => $name,
        'title' => $value['title'],
        'weight' => $weight,
        'access callback' => '_civicrm_categories_access',
        'access arguments' => array("$key"),
      );

      $weight += 10;
    }
  }
  return $ufGroups;
}

function _civicrm_categories_access($profile_id) {
  if (!civicrm_initialize()) {
    return FALSE;
  }

  $allUFGroups = CRM_Core_BAO_UFGroup::getModuleUFGroup('User Account', 0, FALSE);

  if (is_array(CRM_Utils_Array::value($profile_id, $allUFGroups))) {
    return TRUE;
  }
}

/*
 * Translating profile menu title dynamically to override caching.
 */
function civicrm_menu_alter(&$items) {
  // We need to pass a dummy object
  $user = new stdClass();
  $categories = civicrm_categories($user);

  foreach ($categories as $cat) {
    $path = 'user/%user_category/edit/' . $cat['name'];
    $items[$path]['title callback'] = 'civicrm_profile_title_callback';
    $items[$path]['title arguments'] = array((string)$cat['id'], $cat['title']);
  }
}

function civicrm_profile_title_callback($profile_id, $fallback) {
  if (!civicrm_initialize() || empty($profile_id)) {
    return $fallback;
  }

  return CRM_Core_BAO_UFGroup::getTitle($profile_id);
}


function civicrm_register_data($edit, &$user, $category, $reset, $doNotProcess = FALSE) {

  // lets suppress key generation for all registration forms
  civicrm_key_disable();

  $ctype = civicrm_get_ctype('Individual');
  if (is_object($user) && $user->uid) {
    // Happens on $type == 'insert'
    // $reset == false always
    // $doNotProcess == false always
    CRM_Core_BAO_UFMatch::synchronize($user, TRUE, 'Drupal', $ctype);
    $userID = CRM_Core_BAO_UFMatch::getContactId($user->uid);
    $html = CRM_Core_BAO_UFGroup::getEditHTML($userID, '',
      2,
      TRUE,
      $reset, NULL,
      $doNotProcess, $ctype
    );
  }
  else {
    // Happens on $type == 'register'
    $html = CRM_Core_BAO_UFGroup::getEditHTML(NULL, '',
      1,
      TRUE,
      $reset, NULL,
      $doNotProcess, $ctype
    );
  }

  $output = array();
  if ($html) {
    $html           = civicrm_add_jquery($html);
    $index          = empty($category) ? 'civicrm-profile-register' : $category;
    $output[$index] = array('#title' => $category,
      '#value' => $html,
      '#weight' => 1,
    );
  }

  return $output;
}

function civicrm_form_data($edit, &$user, $category, $reset, $doNotProcess = FALSE) {

  // lets suppress key generation for all CMS forms
  civicrm_key_disable();

  $output = array();

  $userID = CRM_Core_BAO_UFMatch::getContactId($user->uid);
  if (!$userID) {
    $ctype = civicrm_get_ctype('Individual');
    CRM_Core_BAO_UFMatch::synchronize($user, FALSE, 'Drupal', $ctype);
    $userID = CRM_Core_BAO_UFMatch::getContactId($user->uid);
  }

  // at this point we better have a valid userID
  if (!$userID) {
    // we get into this scenario if we do not like the email address supplied by the user
    return;
  }

  // check for permission
  // CRM-7509
  $session = CRM_Core_Session::singleton();
  $sessionUserID = $session->get('userID');

  if ($sessionUserID != $userID) {
    // do not allow edit for anon users in joomla frontend, CRM-4668, unless u have checksum CRM-5228
    $config = CRM_Core_Config::singleton();
    if ($config->userFrameworkFrontend) {
      CRM_Contact_BAO_Contact_Permission::validateOnlyChecksum($userID, $this);
    }
    else {
      CRM_Contact_BAO_Contact_Permission::validateChecksumContact($userID, $this);
    }
  }
  $ctype = CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Contact', $userID, 'contact_type');
  try {
    $profileID = _civicrm_get_user_profile_id($category, $userID, $ctype);
  }
  catch (Exception $e) {
    CRM_Core_Error::fatal($e->getMessage());
  }

  $html = CRM_Core_BAO_UFGroup::getEditHTML($userID, $category, NULL, FALSE, $reset, $profileID, $doNotProcess, $ctype);


  if ($html) {
    $title = CRM_Core_DAO::getFieldValue("CRM_Core_DAO_UFGroup", $profileID, 'title', 'id');
    $html = civicrm_add_jquery($html);
    $index = empty($category) ? 'civicrm-profile-my-account' : $category;
    $output[$index][] = array(
      '#title' => $title,
      '#value' => $html,
      '#weight' => 1,
    );
    $output[$index][] = array(
      '#title' => $title,
      '#type' => 'item',
      '#markup' => $html,
      '#weight' => 1,
    );
  }

  return $output;
}


function civicrm_view_data(&$user) {
  if (!civicrm_initialize()) {
    return;
  }
  $userID = CRM_Core_BAO_UFMatch::getContactId($user->uid);
  if ($userID) {
    // make sure user has permission to view the record
    $contactURL = NULL;
    $civiPerm = CRM_Contact_BAO_Contact_Permission::allow($userID);

    if (CRM_Core_Permission::check('access CiviCRM') && $civiPerm) {
      $contactURL =
        '<span class="user-page-link" id="user-page-contact" ><span class="user-page-bullet">&raquo;</span> ' .
        l(ts("View contact record"),
          'civicrm/contact/view',
          array('query' => array('reset' => 1, 'cid' => $userID ))
        ) .
        '</span>';
    }

    if (CRM_Core_Permission::check('access Contact Dashboard')) {
      if (!empty($contactURL)) {
        $contactURL .= '<br/>';
      }
      $contactURL .=
        '<span class="user-page-link" id="user-page-dashboard" ><span class="user-page-bullet">&raquo;</span> ' .
        l(ts("View Contact Dashboard"),
          'civicrm/user',
          array('query' => array('reset' => 1, 'id' => $userID ))
        ) .
        '</span>';
    }

    $ctype = CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Contact', $userID, 'contact_type');

    $ufGroups = CRM_Core_BAO_UFGroup::getModuleUFGroup('User Account', 0, TRUE, CRM_Core_Permission::VIEW, array('id', 'name', 'title', 'is_active'));
    $weight = 100;
    foreach ($ufGroups as $id => $ufGroup) {

      $fieldType = CRM_Core_BAO_UFField::getProfileType($id);
      if (CRM_Contact_BAO_ContactType::isaSubType($fieldType)) {
        $fieldType = CRM_Contact_BAO_ContactType::getBasicType($fieldType);
      }
      if (($fieldType != 'Contact') && ($fieldType != $ctype)) {
        continue;
      }
      $page = new CRM_Profile_Page_Dynamic($userID, $id, NULL, TRUE);
      $pageContent = $page->run();

      // CRM-3537: profile edit link
      $editURL = '';
      if (user_edit_access($user)) {
        $editURL = '<span class="user-page-link" id="user-page-profile-' . substr($ufGroup['title'], 0, 3) . '" ><span class="user-page-bullet">&raquo;</span> '
          . l(ts("Edit %1", array(1 => $ufGroup['title'])), "user/{$user->uid}/edit/" . $ufGroup['name']) . '</span>';
      }

      if ($pageContent) {
        $user->content[$ufGroup['name']] = array(
          '#title' => $ufGroup['title'],
          '#type' => 'user_profile_category',
          '#weight' => $weight,
        );
        $user->content[$ufGroup['name']][$ufGroup['name']] = array(
          '#type' => 'user_profile_item',
          '#title' => NULL,
          '#value' => $pageContent . $editURL,
          '#markup' => $pageContent . $editURL,
        );

        $weight += 10;
      }
    }

    if ($contactURL) {
      $user->content['urls'] = array(
        '#markup' => $contactURL,
        '#weight' => $weight,
      );
    }
  }
  return;
}

/**
 * Get appropriate profile ID for edit screen.
 *
 * @param $name
 *
 * @return int
 *   Profile ID.
 *
 * @throws \CRM_Core_Exception
 */
function _civicrm_get_user_profile_id($name) {
  $profiles = civicrm_api3('uf_group', 'get', array(
    'name' => $name,
    'is_active' => 1,
  ));

  if (!$profiles['count']) {
    $profiles = civicrm_api3('uf_group', 'get', array(
      'title' => $name,
      'is_active' => 1,
      'options' => array('limit' => 1,),
    ));
  }

  if (!$profiles['count']) {
    // @todo I suspect the profile listing is not possible in both scenarios but need to understand what it
    // means before removing from one warning.
    throw new CRM_Core_Exception(ts('The requested Profile (%1) is disabled OR it is not configured to be used for \'Profile\' listings in its Settings OR there is no Profile with that ID. Please contact the site administrator if you need assistance.',
      array(1 => $name)
    ));
  }

  // CRM-15952 we expected 'name' to be a unique field but the DB doesn't enforce that.
  // Extra check if it is not unique here.
  if ($profiles['count'] > 1) {
    foreach ($profiles['values'] as $profile) {
      try {
        $profiles['id'] = civicrm_api3('uf_join', 'getvalue', array(
          'uf_group_id' => $profile['id'],
          'module' => 'User Account',
          'return' => 'uf_group_id',
        ));
        continue;
      }
      catch (Exception $e){
      }
    }
  }

  $ufGroupIDs = CRM_Core_Permission::ufGroupClause(CRM_Core_Permission::EDIT, NULL, TRUE);
  $profileID = $profiles['id'];
  if (!in_array($profileID, $ufGroupIDs)) {
    throw new CRM_Core_Exception(ts('The requested Profile (id = %1) is not configured to be used for \'Profile\' listings in its Settings OR there is no Profile with that ID OR you do not have permission to access this profile. Please contact the site administrator if you need assistance.',
      array(1 => $profileID)
    ));
  }
  return $profileID;
}

function civicrm_validate_data($edit, &$user, $title) {
  static $validated = FALSE;

  if ($validated) {
    return;
  }

  // lets suppress key generation for all validation also
  civicrm_key_disable();

  $validated = TRUE;

  // check for either user/register or admin/user/user/create
  $register = (arg(1) == 'register' || arg(3) == 'create') ? TRUE : FALSE;
  $userID   = CRM_Core_BAO_UFMatch::getContactId($user->uid);
  $errors   = CRM_Core_BAO_UFGroup::isValid($userID, $title, $register);
  if (is_array($errors)) {
    if ($register) {
      foreach ($errors as $name => $error) {
        form_set_error($name, $error);
      }
    }
    else {
      form_set_error('error', "Please complete and save required values in the tab $title");
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Disable the drupal cache for all civicrm pages which should not be cached
 */
function civicrm_cache_disable() {
  global $conf;
  $conf['cache'] = CACHE_DISABLED;
}

/**
 * Disable civicrm key for all forms that interact with the CMS
 * We do not control the CMS form generation and hence should suppress
 * qfKey
 */
function civicrm_key_disable() {
  $config = CRM_Core_Config::singleton();
  $config->keyDisable = TRUE;
}

function civicrm_enable() {
  // set system weight higher than jQuery_update so Civi's preprocess can run
  // last. This is the only way to make sure the jquery noconflict works.
  db_query("UPDATE {system} SET weight = 100 WHERE name = 'civicrm'");
  menu_rebuild();

  menu_link_maintain('civicrm', 'delete', 'civicrm', 'CiviCRM');

  $options = array(
    'link_title' => 'CiviCRM',
    'link_path' => 'civicrm/dashboard',
    'module' => 'civicrm',
    'options' => array('alter' => TRUE),
  );
  menu_link_save($options);

  if (!civicrm_initialize()) {
    return;
  }

  // also invoke civicrm menu rebuild
  CRM_Core_Menu::store();

  // Update the 'blocks' DB table with the blocks.
  if (module_exists('block')) {
    _block_rehash();
  }
}

/**
 * An implementation of hook_translated_menu_item_alter(). This is a hack
 * to hide the CiviCRM menu from the drupal navigation block for folks
 * who dont have access CiviCRM permissions
 **/
function civicrm_translated_menu_link_alter(&$item) {
  if ($item['router_path'] == 'civicrm' &&
    $item['module'] == 'civicrm' &&
    !user_access('access CiviCRM')
  ) {
    $item['access_callback'] = $item['access'] = FALSE;
  }
}

function civicrm_admin_menu() {
  if (!civicrm_initialize()) {
    return;
  }

  $weight  = 10;
  $links   = array();
  $links[] = array(
    'title' => 'CiviCRM',
    'path' => 'civicrm',
    'weight' => $weight,
    'options' => array('query' => 'reset=1'),
  );
  return $links;
}

/**
 * Implementation of hook_views_api().
 */
function civicrm_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'civicrm') . '/modules/views',
  );
}

function civicrm_add_jquery(&$html) {
  CRM_Core_Resources::singleton()->addCoreResources('html-header');
  // JS/CSS markup will be rendered in theme('page') by preprocess function
  return $html;
}

function civicrm_form_alter(&$form, $formValues, $formID) {
  if (in_array($formID, array('user_admin_perm', 'system_clean_url_settings')) && !empty($formValues['post'])) {
    // reset navigation for permissions changed and clean url
    if (!civicrm_initialize()) {
      return;
    }
    CRM_Core_BAO_Navigation::resetNavigation();
  }
  elseif ($formID == 'user_register') {
    $form['#attributes']['enctype'] = 'multipart/form-data';
  }
  elseif ($formID == 'system_modules') {
    $form['#submit'][] = '_civicrm_rebuild';
  }
}

/**
 * (Form API - Submission Callback)
 */
function _civicrm_rebuild($form, &$form_state) {
  civicrm_initialize();
  if (version_compare(CRM_Utils_System::version(), '4.2.beta6') >= 0) {
    CRM_Core_Invoke::rebuildMenuAndCaches(TRUE);
  }
}

/*
 *
 * Implementation of hook_theme_registry_alter().
 * Based on the jquery_update module.
 *
 * Make sure this page preprocess function runs last
 * so that a theme can't call drupal_get_js().
 */
function civicrm_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['page'])) {
    // D6 theme() supports two modes: function or template
    if (isset($info['function'])) {
      // If someone can find a theme which actually defines 'page' with a function, then we
      // should implement & test a wrapper function to generate JS/CSS headers.
      drupal_set_message(t('The page theme is currently unsupported by CiviCRM. Please report.'));
    } else {
      // Add callback to generate JS/CSS headers -- at the beginning
      if ($key = array_search('civicrm_preprocess_page_inject', $theme_registry['page']['preprocess functions'])) {
        // when is this necessary?
        unset($theme_registry['page']['preprocess functions'][$key]);
      }
      array_unshift($theme_registry['page']['preprocess functions'], 'civicrm_preprocess_page_inject');

      // Add callback to tweak JS/CSS headers -- at the end
      if ($key = array_search('civicrm_preprocess_page', $theme_registry['page']['preprocess functions'])) {
        // when is this necessary?
        unset($theme_registry['page']['preprocess functions'][$key]);
      }
      // Now add it on at the end of the array so that it runs last.
      $theme_registry['page']['preprocess functions'][] = 'civicrm_preprocess_page';
    }
  }
}

/**
 * Preprocess callback for theme('page')
 *
 * @see civicrm_theme_registry_alter
 * @see CRM_Upgrade_Incremental_php_FourThree::setPreUpgradeMessage
 */
function civicrm_preprocess_page_inject(&$variables) {
  // CRM-11823 - If Civi bootstrapped, then merge its HTML header with the CMS's header
  global $civicrm_root;
  if (!empty($civicrm_root)) {
    if ($region = CRM_Core_Region::instance('html-header', FALSE)) {
      CRM_Utils_System::addHTMLHead($region->render(''));
    }
  }
}

/**
 * Implementation of moduleName_preprocess_hook().
 * Based on the jquery_update module functions.
 *
 * Strips out JS and CSS for a path.
 */
function civicrm_preprocess_page(&$variables) {
  // to increase it's flexibility.
  if (module_exists('date_popup') && (in_array(arg(0), array('civicrm', 'user')))) {

    /**
     * Have hidden this function as it is not needed,
     * but left as an example when we need to unset js
     * in the future...
     *
     * // Only do this for pages that have JavaScript on them.
     *  if (!empty($variables['scripts'])) {
     *  	$path = drupal_get_path('module', 'date_popup');
     *  	unset($scripts['module'][$path . '/lib/ui.datepicker.js']);
     *  	$variables['scripts'] = drupal_get_js('header', $scripts);
     *  }
     */

    // Similar process for CSS but there are 2 CSS related variables.
    // $variables['css'] and $variables['styles'] are both used.
    if (!empty($variables['css'])) {
      $path = drupal_get_path('module', 'date_popup');
      unset($variables['css']['all']['module'][$path . '/themes/datepicker.css']);
      $variables['styles'] = drupal_get_css($variables['css']);
    }
  }
}

/**
 * Supporting functions to allow using drupal input formats and WYSIWYG API
 * as a CiviCRM rich text editor. This code is in the Drupal module because it's
 * Drupal-version dependent.
 *
 */
function civicrm_drupal_get_wysiwyg_html($attributes, $value = '', $format = FILTER_FORMAT_DEFAULT) {
  $form         = drupal_get_form('civicrm_drupal_wysiwyg_form', $attributes, $value, $format);
  $embed_prefix = "\n<!--//--><![CDATA[//><!--\n";
  $embed_suffix = "\n//--><!]]>\n";
  $script       = drupal_add_js();
  return $form . '<script type="text/javascript">' . $embed_prefix . 'jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $script['setting'])) . ");" . $embed_suffix . "</script>\n";
}

function civicrm_drupal_wysiwyg_form($form_state, $attributes, $value = '', $format = FILTER_FORMAT_DEFAULT) {
  $id             = $attributes['id'];
  $form           = array();
  $form[$id]      = array();
  $form[$id][$id] = array(
    '#type' => 'textarea',
    // title comes from quickform output
    //$attributes['label'],
    '#title' => '',
    '#default_value' => $value,
    '#rows' => $attributes['rows'],
    '#cols' => $attributes['cols'],
    '#id' => $attributes['id'],
    '#name' => $attributes['name'],
  );
  $form[$id]['format'] = filter_form($format);
  foreach (element_children($form[$id]['format']) as $index) {
    if (isset($form[$id]['format'][$index]['#id'])) {
      $form[$id]['format'][$index]['#id'] = 'edit-' . $attributes['id'] . '-format-' . $index;
      $form[$id]['format'][$index]['#name'] = $attributes['id'] . '-format';
    }
  }
  $form['#printed'] = TRUE;
  return $form;
}

function civicrm_drupal_wysiwyg_update_value($element, $caller) {
  $format = $element->getAttribute('name') . '_format';
  // get the format value
  if (isset($caller->_submitValues['format'])) {
    $caller->set($format, check_plain($caller->_submitValues['format']));
    $element->format = $caller->get($format);
  }
  // constant values override both default and submitted ones
  // default values are overriden by submitted
  $value = $element->_findValue($caller->_constantValues);
  if (NULL === $value) {
    $value = $element->_findValue($caller->_submitValues);
    if (NULL === $value) {
      $value = $element->_findValue($caller->_defaultValues);
    }
  }
  if (NULL !== $value) {
    $element->setValue(check_markup($value, $element->format));
  }
}

/**
 * Implementation of hook_filter_tips().
 *
 * This is a D6 hook; for D7, see hook_filter_info
 */
function civicrm_filter_tips($delta, $format, $long = FALSE) {
  switch ($delta) {
    case 0:
      return t('Evaluate <a target="_blank" href="@smarty">Smarty</a> and <a target="_blank" href="@civiapi">CiviCRM API</a> codes',
        array(
          '@smarty' => 'http://www.smarty.net/docsv2/en/',
          '@civiapi' => 'http://wiki.civicrm.org/confluence/display/CRMDOC/CiviCRM+Public+APIs',
        )
      );
  }
}

/**
 * Implementation of hook_filter().
 *
 * This is a D6 hook; for D7, see hook_filter_info
 */
function civicrm_filter($op, $delta = 0, $format = -1, $text = "") {
  switch ($op) {
    case 'list':
      return array(0 => t('CiviCRM-Smarty filter'));

    case 'no cache':
      return TRUE;

    case 'description':
      return t('Evaluate Smarty and CiviCRM API codes with CiviCRM\'s embedded Smarty engine');

    case 'settings':
      return $form;

    case 'process':
      civicrm_initialize();
      $config = CRM_Core_Config::singleton();
      $smarty = CRM_Core_Smarty::singleton();
      require_once 'CRM/Core/Smarty/resources/String.php';
      civicrm_smarty_register_string_resource();
      $was_secure       = $smarty->security;
      $smarty->security = TRUE;
      $text             = $smarty->fetch("string:${text}");
      $smarty->security = $was_secure;

      // In the use-case of embedding Smarty codes inside a Drupal page, one is likely
      // to load data using 'pull MVC' instead of 'push MVC', so the interesting
      // data isn't loaded until after processing the main content. Therefore, we
      // evaluate debug codes after the main content.
      if ($config->debug) {
        $text .= $smarty->fetch('CRM/common/debug.tpl');
      }
      return $text;

    default:
      return $text;
  }
}

/**
 * Implements hook_reviews().
 * This implementation is invoked by coder_review module, and defines
 * specific checks for the CiviCRM Coding Standard.
 */
function civicrm_reviews() {
  $br = 'br';
  $rules = array(
    array(
      '#type' => 'regex',
      '#value' => '\t',
      '#warning' => 'Use an indent of 2 spaces, with no tabs',
    ),
    array(
      '#type' => 'regex',
      '#never' => '<\?php',
      '#value' => '^ (  )*[^ \'".]',
      '#warning' => 'Use an indent of 2 spaces, with no tabs',
      '#severity' => 'minor',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\s(if|elseif|while|foreach|switch|case|return|for|catch)\(',
      '#warning' => 'Control statements should have one space between the control keyword and opening parenthesis',
    ),
    array(
      '#type' => 'regex',
      '#value' => '[\s\(](\w+)\s\(',
      '#not' => '^(if|elseif|while|foreach|switch|case|return|for|list|catch)$',
      '#warning' => 'Functions should be called with no spaces between the function name and opening parentheses',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\){',
      '#warning' => 'use a space between the closing parenthesis and the open bracket',
    ),
    array(
      '#type' => 'regex',
      '#value' => '(\S=>|=>\S)',
      '#source' => 'php',
      '#warning' => 'Arrays should be formatted with a space separating each element and assignment operator',
    ),
    array(
      '#type' => 'regex',
      '#value' => '(\.(?:|\s{2,})[^\)\=\s0-9]|[^\(\s0-9](?:|\s{2,})\.)',
      '#warning' => 'String concatenation should be formatted with a space separating the operators (dot .) and the surrounding terms',
    ),
    array(
      '#type' => 'regex',
      '#value' => '<\?(\w+)',
      '#not' => '^(php|xml)$',
      '#warning' => 'Always use &lt;?php ?&gt; to delimit PHP code, not the &lt;? ?&gt; shorthand',
    ),
    array(
      '#type' => 'callback',
      '#source' => 'all',
      '#value' => '_coder_review_style_closing_php_callback',
      '#warning' => 'the final ?> should be omitted from all code files',
    ),
    array(
      '#type' => 'regex',
      '#value' => '}\s*else',
      '#warning' => 'else statements should begin on a new line',
    ),
    array(
      '#type' => 'regex',
      '#value' => '[,][^ \n\r]',
      '#warning' => 'missing space after comma',
    ),
    array(
      '#type' => 'regex',
      '#value' => '^\s*{',
      '#warning' => 'curly braces { should end a line, not start one',
    ),
    array(
      '#type' => 'regex',
      '#source' => 'html',
      // NOTE: use $br only to avoid a warning.
      '#value' => '<' . $br . '>',
      '#warning' => 'use &lt;br /&gt; instead of &lt;br&gt;',
      '#severity' => 'minor',
    ),
    array(
      '#type' => 'regex',
      '#source' => 'html',
      '#value' => '(?-i)<[A-Z]+',
      '#warning_callback' => '_coder_review_style_xhtml_warning',
      '#severity' => 'minor',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\s(if|elseif|while|foreach|switch|return|for|catch)\s*\(.*\) \s*{\s*[^\s]+',
      '#warning' => 'The control statement should be on a separate line from the control conditional',
    ),
    array(
      '#type' => 'regex',
      '#filename' => array('tpl.php'),
      '#value' => '\s(if|elseif)\s*\(.*\) \s*{\s*[^\s]+',
      '#warning' => 'The control statement should use ":" syntax instead of curly braces.',
    ),
    array(
      '#type' => 'regex',
      '#source' => 'all',
      '#value' => '[ \t]+$',
      '#warning' => 'There should be no trailing spaces',
      '#severity' => 'minor',
    ),
    array(
      '#type' => 'regex',
      '#value' => '[\s\(](strlen|strtolower|strtoupper|substr|ucfirst)\s*\(',
      '#warning' => 'in most cases, replace the string function with the drupal_ equivalent string functions',
      '#severity' => 'minor',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\[\s*[A-Za-z][A-Za-z0-9_]*\s*]',
      '#not' => '\[\s*[A-Z][A-Z0-9_]*\s*]',
      '#warning' => 'use quotes around a string literal array index, this is not only a style issue, but a known performance problem',
      '#case-sensitive' => TRUE,
    ),
    array(
      '#type' => 'regex',
      '#value' => '[\s=>]+(true|false|null)[\)\s;,\n\r]+',
      '#case-sensitive' => TRUE,
      '#warning' => 'Use uppercase for PHP constants, e.g. NULL, TRUE, FALSE',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\s+else\s+if\s*\(',
      '#warning' => 'Use "elseif" in place of "else if"',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\s*[\'"]#value[\'"]\s*=>\s*t\s*\(\s*[\'"]Submit[\'"]\s*\)',
      '#source' => 'allphp',
      '#warning' => 'When labelling buttons, make it clear what the button does, "Submit" is too generic.',
      '#severity' => 'minor',
    ),
  );
  $review = array(
    '#title' => t('CiviCRM Coding Standards'),
    '#link' => 'http://civicrm.org',
    '#rules' => $rules,
    '#description' => t('Should apply to all CiviCRM code.'),
  );
  return array('civicrm_coder' => $review);
}

