<?php

/**
 * Implements hook_install().
 */
function civicrm_install() {
  // If civicrm.settings.php file is already present, we assume CiviCRM
  // is already installed and abort.
  if (file_exists(\Drupal::service('kernel')->getSitePath() . '/civicrm.settings.php')) {
    drupal_set_message(t("CiviCRM appears to have already been installed. Skipping full installation."));
    return;
  }

  $civicrm_base = _civicrm_find_civicrm();

  require_once $civicrm_base . '/CRM/Core/ClassLoader.php';
  CRM_Core_ClassLoader::singleton()->register();

  // The civicrm install process uses globals all over the place. Ideally these
  // will go sometime soon and will be passed as explicit parameters.
  global $crmPath, $cmsPath, $installType;
  $crmPath = $civicrm_base;
  $cmsPath = \Drupal::root();
  $installType = 'drupal';

  // Get database connection details.
  // We attempt to get a separate set of details for a civicrm database, but
  // otherwise default to using the same database as Drupal.
  $drupal_db = \Drupal\Core\Database\Database::getConnection('default')->getConnectionOptions();
  $civicrm_db = _civicrm_get_db_config()['info'];

  $config = array(
    'cms' => 'Drupal8',
    'base_url' => $GLOBALS['base_url'],
    'site_dir' => substr(\Drupal::service('kernel')->getSitePath(), 6), // Remove leading 'sites/'
    'loadGenerated' => \Drupal\Core\Site\Settings::get('civicrm_load_generated', FALSE),
    'mysql' => array(
      'username' => $civicrm_db['username'],
      'password' => $civicrm_db['password'],
      'server' => "{$civicrm_db['host']}:{$civicrm_db['port']}",
      'database' => $civicrm_db['database'],
    ),
    'cmsdb' => array(
      'username' => $drupal_db['username'],
      'password' => $drupal_db['password'],
      'server' => "{$drupal_db['host']}:{$drupal_db['port']}",
      'database' => $drupal_db['database'],
    )
  );

  require_once("{$civicrm_base}/install/civicrm.php");
  // @Todo: Enable CiviCRM's CRM_Core_TemporaryErrorScope::useException() and possibly catch exceptions.
  // At the moment, civicrm doesn't allow exceptions to bubble up to Drupal. See CRM-15022.
  civicrm_main($config);
}

/**
 * Implements hook_requirements().
 *
 * @param $phase
 */
function civicrm_requirements($phase) {
  $requirements = array();

  $civicrm_base = _civicrm_find_civicrm();

  if ($civicrm_base) {
    require_once($civicrm_base . '/Civi/Install/Requirements.php');
    $requirements['civicrm.location'] = array(
      'title' => 'CiviCRM location',
      'value' => $civicrm_base,
      'severity' => REQUIREMENT_OK,
      'description' => 'CiviCRM core directory',
    );
  }
  else {
    $requirements['civicrm.location'] = array(
      'title' => 'CiviCRM location',
      'value' => NULL,
      'severity' => REQUIREMENT_ERROR,
      'description' => 'CiviCRM must be downloaded into the libraries folder.',
    );
    return $requirements;
  }

  // Grab db connection info
  $db_config = _civicrm_get_db_config()['info'];
  $db_config['host'] = "{$db_config['host']}:{$db_config['port']}";

  $install_requirements = new \Civi\Install\Requirements();

  // Gather directories that need to be writable
  $file_paths = [];
  if (!file_exists(\Drupal::service('kernel')->getSitePath() . '/civicrm.settings.php')) {
    $file_paths[] =  realpath(\Drupal::service('kernel')->getSitePath()); // eg. sites/default folder
  }
  $file_paths[] = realpath(\Drupal\Core\StreamWrapper\PublicStream::basePath()); // eg. sites/default/files folder

  // Attempt to make directories writable
  // We don't bother checking if these attempts are actually successful as
  // that will be checked by checkAll().
  foreach ($file_paths as $path) {
    @chmod($path, 0755);
  }

  foreach ($install_requirements->checkAll(array('db_config' => $db_config, 'file_paths' => $file_paths)) as $key => $result) {
    $requirements["civicrm.$key"] = array(
      'title' => $result['title'],
      'value' => NULL,
      'severity' => $result['severity'],
      'description' => $result['details'],
    );
  }

  return $requirements;
}

/**
 * Returns the path to where CiviCRM is installed.
 *
 * @return string|void
 *
 * Recommended location for civicrm is in /libraries/civicrm [citation needed].
 * We also allow /modules/civicrm, which seems to work fine.
 */
function _civicrm_find_civicrm() {
  if ($path = drupal_get_path('module', 'civicrm')) {
    if (file_exists($path . '/CRM/Core/ClassLoader.php')) {
      return \Drupal::service('file_system')->realpath($path);
    }
  }

  if ($path = libraries_get_path('civicrm')) {
    if (file_exists($path . '/CRM/Core/ClassLoader.php')) {
      return \Drupal::service('file_system')->realpath($path);
    }
  }
}

/**
 * Attempt to use a 'civicrm' labelled database connection if one exists.
 * Otherwise default to using the same connection used by drupal.
 *
 * Also handle the special case where this is running as a test.
 */
function _civicrm_get_db_config() {
  if (drupal_valid_test_ua()) {
    $config = \Drupal\Core\Database\Database::getConnectionInfo('civicrm_test');
    if ($config) {
      return array(
        'key' => 'civicrm_test',
        'info' => $config['default'],
      );
    }
    else {
      throw new \RuntimeException("No civicrm_test database provided");
    }
  }

  if ($config = \Drupal\Core\Database\Database::getConnectionInfo('civicrm')) {
    return array(
      'key' => 'civicrm',
      'info' => $config['default'],
    );
  }
  else {
    return array(
      'key' => 'default',
      'info' => \Drupal\Core\Database\Database::getConnectionInfo('default')['default'],
    );
  }
}
